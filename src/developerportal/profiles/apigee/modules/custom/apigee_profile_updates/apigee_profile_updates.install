<?php

define('ENFORCE_PHP_VERSION_AT_PROFILE_INSTALL', FALSE);

/**
 * Implements hook_install().
 *
 * Performs all devportal-related updates beginning with 15.01.30.00.
 */
function apigee_profile_updates_install() {
  // See if the credential directory is defined. If all is normal, it shouldn't
  // be defined yet.
  $credential_dir = variable_get('apigee_credential_dir');
  if (empty($credential_dir)) {
    // Detect private dir if it is configured already.
    $credential_dir = variable_get('file_private_path', NULL);
    // Make sure private dir exists and is writable.
    if (!empty($credential_dir)) {
      if (!is_dir(DRUPAL_ROOT . '/' . $credential_dir) || !is_writable(DRUPAL_ROOT . '/' . $credential_dir)) {
        unset($credential_dir);
      }
    }
    // Do we need to guess where to store?
    if (!isset($credential_dir)) {
      foreach (array(
                 'sites/default/files/private',
                 'sites/default/private'
               ) as $private_dir) {
        if (is_dir(DRUPAL_ROOT . '/' . $private_dir) && is_writable(DRUPAL_ROOT . '/' . $private_dir)) {
          $credential_dir = $private_dir;
          break;
        }
      }
    }
    if (!isset($credential_dir)) {
      $credential_dir = variable_get('file_public_path', 'sites/default/files') . '/private';
      if (!file_exists(DRUPAL_ROOT . '/' . $credential_dir)) {
        @mkdir($credential_dir);
      }
    }
    variable_set('apigee_credential_dir', $credential_dir);
  }

  // This should actually perform the migration for us.
  drupal_load('module', 'devconnect');
  devconnect_get_org_settings();

  // Migrate key to the filesystem.
  $key = devconnect_get_crypt_key();
  if (is_dir($credential_dir) && is_writable($credential_dir)) {
    $result = file_put_contents($credential_dir . '/.apigee.key', $key);
    if ($result !== FALSE) {
      variable_del('apigee_crypt_key');
    }
  }
}

/**
 * Implements hook_requirements().
 *
 * Ensures we are using a given minimum PHP version. If the PHP is too old,
 * emit a requirements error. Also ensures that the openssl extension is
 * loaded.
 */
function apigee_profile_updates_requirements() {
  $requirements = array();
  $t = get_t();

  // Don't error out in the case of updates, since this prevents update.php
  // from running.
  // MAINTENANCE_MODE (when defined) can be 'install' or 'update', depending
  // upon which action is being performed. If MAINTENANCE_MODE is undefined,
  // we are on the site status report page.
  if (defined('MAINTENANCE_MODE')) {
    if (MAINTENANCE_MODE == 'install') {
      $severity = ENFORCE_PHP_VERSION_AT_PROFILE_INSTALL ? REQUIREMENT_ERROR : REQUIREMENT_INFO;
    }
    else {
      $severity = REQUIREMENT_INFO;
    }
    // NOTE: by using the 'php' key, we overwrite the system module's
    // PHP version check message, so there is less clutter.
    $php_key = 'php';
  }
  else {
    $severity = REQUIREMENT_ERROR;
    // If we use 'php' as the key here, the display gets messed up on the
    // status report.
    $php_key = 'php-devportal';
  }

  drupal_load('module', 'apigee_profile_updates');
  if (version_compare(PHP_VERSION, APIGEE_MINIMUM_PHP_VERSION, '<')) {
    // Setting the weight to a negative number bumps the error message to the
    // top. -1 puts it right under Drupal version and Install profile.
    $requirements[$php_key] = array(
      'description' => _apigee_profile_updates_warning_message(),
      'severity' => $severity,
      'title' => $t('PHP version'),
      'value' => $t('Your PHP version is out-of-date.'),
      'weight' => -1,
    );
  }

  if (!extension_loaded('openssl')) {
    $requirements['openssl'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('OpenSSL extension'),
      'value' => $t('The OpenSSL PHP extension is required.'),
    );
  }

  return $requirements;
}

/**
 * Enable Apigee Google Tag Manager and Update modules where appropriate.
 */
function apigee_profile_updates_update_7101() {
  $modules = array();
  if (!module_exists('update')) {
    $modules[] = 'update';
  }
  if (isset($_ENV['PANTHEON_ENVIRONMENT']) && !module_exists('apigee_gtm')) {
    $modules[] = 'apigee_gtm';
  }
  if (!empty($modules)) {
    module_enable($modules);
  }
}

/**
 * Disable Rubik theme, enables Adminimal instead. Also enables Adminimal
 * Admin Menu (unless admin_menu module is not enabled).
 */
function apigee_profile_updates_update_7102() {
  $current_admin_theme = variable_get('admin_theme');
  if ($current_admin_theme == 'rubik') {
    variable_set('admin_theme', 'adminimal');
    theme_enable(array('adminimal'));
    theme_disable(array('rubik'));
    if (module_exists('admin_menu')) {
      module_enable(array('adminimal_admin_menu'));
    }
  }
}

/**
 * Entirely remove jquery_colorpicker module data unless it is in use.
 */
function apigee_profile_updates_update_7103() {
  $module_info = db_select('system', 's')
    ->fields('s', array('status'))
    ->condition('name', 'jquery_colorpicker')
    ->execute()
    ->fetchAssoc();

  // Does this row even exist in the system table?
  if ($module_info) {
    // Default to deleting it.
    $delete = TRUE;
    if ($module_info['status']) {
      // Module is enabled, so see if anything is using it.
      $count = db_select('field_config', 'f')
        ->condition('type', 'jquery_colorpicker')
        ->fields('f', array('field_name'))
        ->execute()
        ->rowCount();
      if ($count > 0) {
        // Module is in use for at least one field, so keep it.
        $delete = FALSE;
      }
    }
    if ($delete) {
      db_delete('system')->condition('name', 'jquery_colorpicker')->execute();
    }
  }
  system_rebuild_module_data();
}
